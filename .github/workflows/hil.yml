name: Run tests in hardware

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled]

# schedule:
#   - cron: '0 2 * * *'

concurrency:
  group: build-${{github.event.pull_request.number || github.ref}}
  cancel-in-progress: true

jobs:
  prep_sketches:
    if: contains(github.event.pull_request.labels.*.name, 'hil_test')
    name: Prepare Sketches
    runs-on: ubuntu-latest
    outputs:
      sketches: ${{ steps.prep-sketches.outputs.sketches }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: repo

      - name: Prepare Sketches
        id: prep-sketches
        run: |
          SKETCHES=$(jq -c -n '$ARGS.positional' --args `find repo/tests -mindepth 1 -maxdepth 1 -type d | cut -d"/" -f3`)
          echo "::set-output name=sketches::${SKETCHES}"

      - name: Tar repository
        run: tar zcf repo.tar.gz repo

      - name: Upload repo's archive
        uses: actions/upload-artifact@v2
        with:
          name: repo-archive
          path: repo.tar.gz

  Build:
    needs: prep_sketches
    name: Build ${{matrix.sketches}} for ${{matrix.fqbn}}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ouss4/arduino-esp32/esp32-toolchains:latest
      volumes:
        - /home/runner/work/_actions/arduino/compile-sketches/v1:/home/runner/work/_actions/arduino/compile-sketches/v1
    strategy:
      matrix:
        fqbn: ['esp32:esp32:esp32', 'esp32:esp32:esp32s2', 'esp32:esp32:esp32c3']
        sketches: ${{fromJson(needs.prep_sketches.outputs.sketches)}}

    steps:
      - name: Download Source Artifact
        uses: actions/download-artifact@v2
        with:
          name: repo-archive
          path: .

      - name: Extract repositroy
        run: tar zxf repo.tar.gz --strip-components=1

      - name: Get target
        run: echo "chip=$(echo ${{matrix.fqbn}} | cut -d":" -f3)" >> $GITHUB_ENV

      - name: Build sketches
        uses: arduino/compile-sketches@v1
        with:
          fqbn: ${{matrix.fqbn}}
          verbose: true
          platforms: |
            - name: esp32:esp32
              source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          cli-compile-flags: |
            - --build-path
            - tests/${{matrix.sketches}}/build
          sketch-paths: |
            - tests/${{matrix.sketches}}

      - name: Upload ${{matrix.sketches}}-${{env.chip}} artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.sketches}}-${{env.chip}}.artifacts
          path: |
            tests/${{matrix.sketches}}/build/*.bin
            tests/${{matrix.sketches}}/build/*.json

  Test:
    needs: [prep_sketches, Build]
    name: Test ${{matrix.sketches}} for ${{matrix.fqbn}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fqbn: ['esp32:esp32:esp32', 'esp32:esp32:esp32s2', 'esp32:esp32:esp32c3']
        sketches: ${{fromJson(needs.prep_sketches.outputs.sketches)}}

    steps:
       - name: Download Source Artifact
         uses: actions/download-artifact@v2
         with:
           name: repo-archive
           path: .

       - name: Extract repositroy
         run: tar zxf repo.tar.gz --strip-components=1

       - name: Get target
         run: echo "chip=$(echo ${{matrix.fqbn}} | cut -d":" -f3)" >> $GITHUB_ENV

       - name: Download ${{matrix.sketches}}-${{env.chip}} artifacts
         uses: actions/download-artifact@v2
         with:
           name: ${{matrix.sketches}}-${{env.chip}}.artifacts
           path: tests/${{matrix.sketches}}/build

       - name: Check artifacts
         run: ls -R tests

       - name: Check chip
         run: cat tests/${{matrix.sketches}}/build/build.options.json

